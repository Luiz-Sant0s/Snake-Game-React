{"version":3,"sources":["helpers/DirectionToGo/index.ts","helpers/config/gameSettings.ts","helpers/context/GameContext/context.tsx","helpers/context/index.tsx","components/PlayArea/styles.ts","components/Square/styles.ts","components/Square/index.tsx","components/Fruit/index.tsx","components/Snake/index.tsx","components/PlayArea/index.tsx","components/Header/styles.ts","components/Header/index.tsx","helpers/ImageGlobal/index.tsx","components/template/Game/styles.ts","components/StartOrReplay/style.ts","components/StartOrReplay/index.tsx","components/MobileControls/styles.ts","components/MobileControls/index.tsx","components/GoToGitHub/styles.ts","components/GoToGitHub/index.tsx","components/template/Game/index.tsx","App.tsx","index.tsx"],"names":["DirectionToGo","GAME_SETTINGS","gameResolution","width","height","squareArea","speed","initial","minSpeed","speedDecay","createInitalSnake","top","Math","floor","left","snake","i","push","getRandomPosition","getRandomInt","min","max","random","DEFAULT_VALUE","state","fruit","pontuation","moveDirection","RIGHT","setState","start","changeDirection","newDirection","isGameOver","msgStart","GameContext","createContext","GameContextProvider","children","playingField","useRef","useState","currentIntervalId","setCurrentIntervalId","isStart","setIsStart","speedSeconds","setSpeedSeconds","gameOver","undefined","clearInterval","moveSnake","removeLastNode","newSnake","currentSnakeHead","length","shift","LEFT","TOP","BOTTOM","verifyColision","checkSnakeCollidedWithBorders","filter","item","checkSnakeCollidedWithItself","toEatFruit","changeSpeed","useEffect","intervalId","setInterval","verifyFruit","JSON","stringify","Provider","value","current","focus","GlobalContext","PlayAreaContainer","styled","section","SquareDesign","div","Square","style","Fruit","useContext","background","borderRadius","Snake","map","index","border","PlayArea","ref","tabIndex","HeaderContainer","PointScreenContainer","Header","ImageGlobal","Cursor","process","GoToGitHub","BackgroundGame","Start","Replay","Button","Up","Down","Left","Right","GameContainer","cursorVisible","css","ContainerStartOrReplay","dialog","props","open","TitleModal","h1","DescriptionModal","p","BtnStart","button","BtnReplay","StartOrReplay","onClick","MobileControlsContainer","BodyControls","BtnMobile","BtnUp","BtnLEFT","BtnRIGHT","BtnDown","MobileControls","RotateIconGit","keyframes","GoToGitHubStyle","LinkToGitHub","a","ImgGit","img","TextGitHub","href","target","src","alt","Game","role","onKeyUp","e","code","onKeyDown","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f913d15.chunk.js","sourcesContent":["enum DirectionToGo {\r\n    TOP = 1,\r\n    BOTTOM = 2,\r\n    LEFT = 3,\r\n    RIGHT = 4,\r\n}\r\n\r\nexport default DirectionToGo;","const GAME_SETTINGS = {\r\n    gameResolution:{\r\n        width: 350,\r\n        height: 350,\r\n        squareArea: 12.5\r\n    },\r\n    speed: {\r\n        initial: 300,\r\n        minSpeed: 100,\r\n        speedDecay: 15 \r\n    }\r\n};\r\n\r\nexport default GAME_SETTINGS;","import React, { createContext, useState, useEffect, useRef } from \"react\";\r\nimport GAME_SETTINGS from \"../../config/gameSettings\";\r\nimport DirectionToGo from \"../../DirectionToGo\";\r\n\r\ninterface StartingPosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\nconst { width, height, squareArea } = GAME_SETTINGS.gameResolution;\r\n\r\nconst createInitalSnake = () => {\r\n  const { height, width, squareArea } = GAME_SETTINGS.gameResolution;  \r\n  const top = Math.floor(Math.floor(height/squareArea)/2) * squareArea;\r\n  const left = Math.floor(Math.floor(width/squareArea)/2) * squareArea;\r\n\r\n  let snake: StartingPosition[] = [];\r\n\r\n  for(let i = 0; i < 3; i++){\r\n    snake.push({top, left: left + (squareArea * i)});\r\n  }\r\n\r\n  return snake;\r\n};\r\n\r\nconst getRandomPosition = ():StartingPosition => {\r\n  let left = getRandomInt(0, width/squareArea) * squareArea;\r\n  let top = getRandomInt(0, height/squareArea) * squareArea;\r\n  \r\n  if(left === width)\r\n      left = left - squareArea;\r\n  if(top === height)\r\n      top = top - squareArea;\r\n  \r\n  return { left, top};\r\n};\r\n\r\nconst getRandomInt = (min: number, max: number) => {   \r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\ntype GameType = {\r\n  fruit: StartingPosition;\r\n  snake: StartingPosition[];\r\n  pontuation: number;\r\n  moveDirection: DirectionToGo;\r\n  isGameOver: boolean;\r\n  msgStart: boolean;\r\n};\r\n\r\ntype PropsGameContext = {\r\n  playingField?: any;\r\n  state: GameType;\r\n  setState: React.Dispatch<React.SetStateAction<GameType>>;\r\n  start: () => void;\r\n  changeDirection: (newDirection: DirectionToGo) => void;\r\n};\r\nconst DEFAULT_VALUE = {\r\n  state: {\r\n    fruit: getRandomPosition(),\r\n    pontuation: 0,\r\n    moveDirection: DirectionToGo.RIGHT,\r\n    snake: createInitalSnake(),\r\n  } as GameType,\r\n  setState: () => {},\r\n  start: () => {},\r\n  changeDirection: (newDirection: DirectionToGo) => {},\r\n  isGameOver: false,\r\n  msgStart: true,\r\n};\r\nconst GameContext = createContext<PropsGameContext>(DEFAULT_VALUE);\r\nconst GameContextProvider: React.FC = ({ children }) => {\r\n  const playingField = useRef(null);\r\n  const [state, setState] = useState(DEFAULT_VALUE.state);\r\n  const [currentIntervalId, setCurrentIntervalId] = useState<NodeJS.Timeout>();\r\n  const [isStart, setIsStart] = useState(false);\r\n  const [speedSeconds, setSpeedSeconds] = useState(GAME_SETTINGS.speed.initial);\r\n\r\n  const useInitialfocus = (ref: any) => {\r\n    ref.current.focus();\r\n  };\r\n\r\n  const start = () => {\r\n    if (currentIntervalId !== undefined) clearInterval(currentIntervalId);\r\n    setState({\r\n      ...state,\r\n      fruit: getRandomPosition(),\r\n      snake: createInitalSnake(),\r\n      moveDirection: DirectionToGo.RIGHT,\r\n      pontuation: 0,\r\n      isGameOver: false,\r\n      msgStart: false,\r\n    });\r\n    setSpeedSeconds(GAME_SETTINGS.speed.initial);\r\n    setIsStart(true);\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    useInitialfocus(playingField);\r\n  };\r\n\r\n  const gameOver = () => {\r\n    setIsStart(false);\r\n    setState({\r\n      ...state,\r\n      msgStart: false,\r\n      isGameOver: true,\r\n    });\r\n\r\n    if (currentIntervalId !== undefined) clearInterval(currentIntervalId);\r\n  };\r\n\r\n  const moveSnake = (removeLastNode = true) => {\r\n    let newSnake = state.snake;\r\n    const { squareArea } = GAME_SETTINGS.gameResolution;\r\n\r\n    const currentSnakeHead = newSnake[newSnake.length - 1];\r\n    switch (state.moveDirection) {\r\n      case DirectionToGo.RIGHT: {\r\n        if (removeLastNode) newSnake.shift();\r\n        newSnake.push({\r\n          top: currentSnakeHead.top,\r\n          left: currentSnakeHead.left + squareArea,\r\n        });\r\n        break;\r\n      }\r\n      case DirectionToGo.LEFT: {\r\n        if (removeLastNode) newSnake.shift();\r\n        newSnake.push({\r\n          top: currentSnakeHead.top,\r\n          left: currentSnakeHead.left - squareArea,\r\n        });\r\n        break;\r\n      }\r\n      case DirectionToGo.TOP: {\r\n        if (removeLastNode) newSnake.shift();\r\n        newSnake.push({\r\n          top: currentSnakeHead.top - squareArea,\r\n          left: currentSnakeHead.left,\r\n        });\r\n        break;\r\n      }\r\n      case DirectionToGo.BOTTOM: {\r\n        if (removeLastNode) newSnake.shift();\r\n        newSnake.push({\r\n          top: currentSnakeHead.top + squareArea,\r\n          left: currentSnakeHead.left,\r\n        });\r\n        break;\r\n      }\r\n    }\r\n    setState({\r\n      ...state,\r\n      snake: newSnake,\r\n    });\r\n  };\r\n\r\n  const changeDirection = (newDirection: DirectionToGo) => {\r\n    if (\r\n      state.moveDirection === DirectionToGo.RIGHT &&\r\n      newDirection === DirectionToGo.LEFT\r\n    )\r\n      return;\r\n    if (\r\n      state.moveDirection === DirectionToGo.LEFT &&\r\n      newDirection === DirectionToGo.RIGHT\r\n    )\r\n      return;\r\n    if (\r\n      state.moveDirection === DirectionToGo.TOP &&\r\n      newDirection === DirectionToGo.BOTTOM\r\n    )\r\n      return;\r\n    if (\r\n      state.moveDirection === DirectionToGo.BOTTOM &&\r\n      newDirection === DirectionToGo.TOP\r\n    )\r\n      return;\r\n\r\n    setState({\r\n      ...state,\r\n      moveDirection: newDirection,\r\n    });\r\n  };\r\n\r\n  const checkSnakeCollidedWithItself = () => {\r\n    const currentSnakeHead = state.snake[state.snake.length - 1];\r\n    if (currentSnakeHead) {\r\n      const { left, top } = currentSnakeHead;\r\n      if (\r\n        state.snake.filter((item) => item.left === left && item.top === top)\r\n          .length > 1\r\n      ) {\r\n        gameOver();\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkSnakeCollidedWithBorders = () => {\r\n    const currentSnakeHead = state.snake[state.snake.length - 1];\r\n    const { width, height, squareArea } = GAME_SETTINGS.gameResolution;\r\n    if (currentSnakeHead) {\r\n      if (\r\n        currentSnakeHead.left < 0 ||\r\n        currentSnakeHead.left > width - squareArea\r\n      ) {\r\n        gameOver();\r\n      }\r\n      if (\r\n        currentSnakeHead.top < 0 ||\r\n        currentSnakeHead.top > height - squareArea\r\n      ) {\r\n        gameOver();\r\n      }\r\n    }\r\n  };\r\n\r\n  const verifyColision = () => {\r\n    checkSnakeCollidedWithBorders();\r\n    checkSnakeCollidedWithItself();\r\n  };\r\n\r\n  const verifyFruit = () => {\r\n    const currentSnakeHead = state.snake[state.snake.length - 1];\r\n    if (\r\n      currentSnakeHead.top === state.fruit.top &&\r\n      currentSnakeHead.left === state.fruit.left\r\n    )\r\n      toEatFruit();\r\n  };\r\n\r\n  const toEatFruit = () => {\r\n    moveSnake(false);\r\n    changeSpeed();\r\n    setState({\r\n      ...state,\r\n      fruit: getRandomPosition(),\r\n      pontuation: state.pontuation + 1,\r\n    });\r\n  };\r\n  const changeSpeed = () => {\r\n    const { minSpeed, speedDecay } = GAME_SETTINGS.speed;\r\n    if (speedSeconds > minSpeed) setSpeedSeconds(speedSeconds - speedDecay);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isStart) {\r\n      if (currentIntervalId !== undefined) clearInterval(currentIntervalId);\r\n      moveSnake();\r\n      const intervalId = setInterval(() => moveSnake(), speedSeconds);\r\n      setCurrentIntervalId(intervalId);\r\n    }\r\n  }, [state.moveDirection, isStart, state.fruit]);\r\n\r\n  useEffect(() => {\r\n    verifyColision();\r\n    verifyFruit();\r\n  }, [JSON.stringify(state.snake)]);\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        playingField,\r\n        state,\r\n        setState,\r\n        start,\r\n        changeDirection,\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\nexport { GameContextProvider };\r\nexport default GameContext;\r\n","import React from \"react\";\r\n\r\nimport { GameContextProvider } from \"./GameContext/context\";\r\n\r\nconst GlobalContext: React.FC = ({ children }) => {\r\n  return (\r\n      <GameContextProvider>{children}</GameContextProvider>\r\n  );\r\n};\r\n\r\nexport default GlobalContext;\r\n","import styled from 'styled-components';\r\n\r\nexport const PlayAreaContainer = styled.section`\r\n    overflow: hidden;\r\n    display: flex;\r\n    position: relative;\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    &:active {\r\n        cursor: wait;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const SquareDesign = styled.div`\r\n    background: #000;\r\n    top: 0px;\r\n    left: 0px;\r\n    box-sizing: border-box;\r\n    position: absolute;\r\n`;","import React from 'react';\r\nimport GAME_SETTINGS from '../../helpers/config/gameSettings';\r\nimport * as S from './styles';\r\nconst { squareArea } = GAME_SETTINGS.gameResolution;\r\n\r\ninterface SquareTypes {\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst Square: React.FC<SquareTypes> = ({ style }) => {\r\n    return <S.SquareDesign style={{...style, width: squareArea, height: squareArea}}/>\r\n};\r\n\r\nexport default Square;","import React, { useContext } from 'react';\r\nimport Square from '../Square';\r\nimport GameContext from \"../../helpers/context/GameContext/context\";\r\n\r\nconst Fruit = () => {\r\n\r\n    const { state } = useContext(GameContext);\r\n    const { top, left } = state.fruit;\r\n    \r\n    return (\r\n        <Square style={{top, left, background: '#fa0800', borderRadius: '20px'}} />\r\n    )\r\n};\r\n\r\nexport default Fruit;","import React, { useContext } from 'react';\r\nimport Square from '../Square';\r\nimport GameContext from \"../../helpers/context/GameContext/context\";\r\n\r\nconst Snake = () => {\r\n    const { state } = useContext(GameContext);\r\n    \r\n    return (\r\n        <>\r\n            {state.snake.map(({top, left}, index)=>(\r\n                <Square key={'snake_'+index} style={{top, left, border:'1px solid #ddd'}}/>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Snake;","import React, { useContext } from \"react\";\r\nimport GameContext from \"../../helpers/context/GameContext/context\";\r\nimport * as S from \"./styles\";\r\nimport Fruit from \"../Fruit\";\r\nimport Snake from \"../Snake\";\r\nimport GAME_SETTINGS from \"../../helpers/config/gameSettings\";\r\n\r\nconst PlayArea = () => {\r\n\r\n  const { playingField } = useContext(GameContext);\r\n  const { width, height } = GAME_SETTINGS.gameResolution;\r\n  return (\r\n    <S.PlayAreaContainer ref={playingField} tabIndex={-1} style={{ width, height }}>\r\n      <Fruit />\r\n      <Snake />\r\n    </S.PlayAreaContainer>\r\n  );\r\n};\r\n\r\nexport default PlayArea;\r\n","import styled from \"styled-components\";\r\n\r\nexport const HeaderContainer = styled.div`\r\n  border-bottom: 4px solid #000;\r\n  width: 100%;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  \r\n  h1 {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  @media (max-width: 1024px) {\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    h1 {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PointScreenContainer = styled.div`\r\n  font-weight: bold;\r\n\r\n  @media (max-width: 1024px) {\r\n    font-size: 0.7rem;\r\n  }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport GameContext from \"../../helpers/context/GameContext/context\";\r\nimport * as S from \"./styles\";\r\n\r\nconst Header = () => {\r\n  const { state } = useContext(GameContext);\r\n\r\n  return (\r\n    <S.HeaderContainer>\r\n      <h1>Snake Game</h1>\r\n\r\n      <S.PointScreenContainer>Score: {state.pontuation}</S.PointScreenContainer>\r\n    </S.HeaderContainer>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n"," const ImageGlobal = {\r\n    Cursor: `${process.env.PUBLIC_URL}/img/cursor.png`,\r\n    GoToGitHub: `${process.env.PUBLIC_URL}/img/go-to-GitHub.png`,\r\n    BackgroundGame: `${process.env.PUBLIC_URL}/img/background-game.png`,\r\n    Start: `${process.env.PUBLIC_URL}/img/start.png`,\r\n    Replay: `${process.env.PUBLIC_URL}/img/replay.png`,\r\n    Button: {\r\n        Up: `${process.env.PUBLIC_URL}/img/btn-up.png`,\r\n        Down: `${process.env.PUBLIC_URL}/img/btn-down.png`,\r\n        Left: `${process.env.PUBLIC_URL}/img/btn-left.png`,\r\n        Right: `${process.env.PUBLIC_URL}/img/btn-right.png`,\r\n    }\r\n}\r\n\r\nexport default ImageGlobal","import styled, { css } from \"styled-components\";\r\nimport ImageGlobal from \"../../../helpers/ImageGlobal\";\r\n\r\ninterface CursorType {\r\n  cursorVisible: boolean;\r\n}\r\n\r\nexport const GameContainer = styled.section<CursorType>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 5% auto;\r\n  border: 2px solid #000;\r\n  padding: 0;\r\n  background-image: url(${ImageGlobal.BackgroundGame});\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  @media (max-width: 1024px) {\r\n    margin-top: 4px;\r\n    margin: 1% auto;\r\n  }\r\n\r\n  ${({ cursorVisible }) => \r\n    cursorVisible || cursorVisible === undefined\r\n      ? css`\r\n          cursor: url(${ImageGlobal.Cursor}), default;\r\n        `\r\n      : css`\r\n          cursor: none;\r\n        `};\r\n`;\r\n","import styled from \"styled-components\";\r\nimport ImageGlobal from \"../../helpers/ImageGlobal\";\r\n\r\ninterface OpenDialogType {\r\n  open: boolean;\r\n}\r\n\r\nexport const ContainerStartOrReplay = styled.dialog<OpenDialogType>`\r\n  display: ${(props) => (props.open ? \"flex\" : \"none\")};\r\n  flex-direction: column;\r\n  align-content: center;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n`;\r\n\r\nexport const TitleModal = styled.h1`\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const DescriptionModal = styled.p``;\r\n\r\nexport const BtnStart = styled.button`\r\n  cursor: pointer;\r\n  height: 77px;\r\n  width: 77px;\r\n  background-image: url(${ImageGlobal.Start});\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  border: none;\r\n  background-color: transparent;\r\n\r\n  @media (max-width: 1024px) {\r\n    font-size: 0.8rem;\r\n    border-width: 3px;\r\n    padding: 4px 8px;\r\n  }\r\n  &:active {\r\n    opacity: 0.2;\r\n    cursor: wait;\r\n  }\r\n`;\r\n\r\nexport const BtnReplay = styled.button`\r\n  cursor: pointer;\r\n  height: 71px;\r\n  width: 72px;\r\n  background-image: url(${ImageGlobal.Replay});\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  border: none;\r\n  background-color: transparent;\r\n\r\n  @media (max-width: 1024px) {\r\n    font-size: 0.8rem;\r\n    border-width: 3px;\r\n    padding: 4px 8px;\r\n  }\r\n  &:active {\r\n    opacity: 0.2;\r\n    cursor: wait;\r\n  }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport GameContext from \"../../helpers/context/GameContext/context\";\r\nimport * as S from \"./style\";\r\n\r\nconst StartOrReplay = () => {\r\n  const { state, start } = useContext(GameContext);\r\n\r\n  return (\r\n    <S.ContainerStartOrReplay\r\n      open={\r\n        state.isGameOver || state.msgStart || state.msgStart === undefined\r\n          ? true\r\n          : false\r\n      }\r\n    >\r\n      {state.isGameOver && (\r\n        <>\r\n          <S.TitleModal>GAME OVER</S.TitleModal>\r\n          <S.DescriptionModal>\r\n            Your score: {state.pontuation}\r\n          </S.DescriptionModal>\r\n          <S.BtnReplay onClick={start} />\r\n        </>\r\n      )}\r\n\r\n      {state.msgStart ||\r\n        (state.msgStart === undefined && (\r\n          <>\r\n            <S.TitleModal>Hello, let's play?</S.TitleModal>\r\n            <p>Go press start</p>\r\n            <S.BtnStart onClick={start} />\r\n          </>\r\n        ))}\r\n    </S.ContainerStartOrReplay>\r\n  );\r\n};\r\n\r\nexport default StartOrReplay;\r\n","import styled from \"styled-components\";\r\nimport ImageGlobal from \"../../helpers/ImageGlobal\";\r\n\r\nconst btn = `${process.env.PUBLIC_URL}/img/BtnTop.png`;\r\n\r\nconst Btn = {\r\n  BtnTOP: `${process.env.PUBLIC_URL}/img/BtnTop.png`,\r\n  BtnBOTTOM: `${process.env.PUBLIC_URL}/img/BtnBottom.png`,\r\n  BtnLEFT: `${process.env.PUBLIC_URL}/img/BtnLeft.png`,\r\n  BtnRIGHT: `${process.env.PUBLIC_URL}/img/BtnRight.png`,\r\n};\r\n\r\nexport const MobileControlsContainer = styled.div`\r\n  position: relative;\r\n  padding: 20px;\r\n  display: none;\r\n  @media (max-width: 1024px) {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport const BodyControls = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  div {\r\n    display: flex;\r\n    gap: 20px;\r\n  }\r\n`;\r\n\r\nconst BtnMobile = styled.button`\r\n  cursor: pointer;\r\n  height: 60px;\r\n  width: 60px;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  border: none;\r\n  background-color: transparent;\r\n\r\n  &:focus,\r\n  &:active {\r\n    outline: none;\r\n  }\r\n  &:active {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport const BtnUp = styled(BtnMobile)`\r\n  height: 70px;\r\n  background-image: url(${ImageGlobal.Button.Up});\r\n  position: relative;\r\n  top: 15px;\r\n`;\r\n\r\nexport const BtnLEFT = styled(BtnMobile)`\r\n  width: 70px;\r\n  background-image: url(${ImageGlobal.Button.Left});\r\n`;\r\n\r\nexport const BtnRIGHT = styled(BtnMobile)`\r\n  width: 70px;\r\n  background-image: url(${ImageGlobal.Button.Right});\r\n`;\r\n\r\nexport const BtnDown = styled(BtnMobile)`\r\n  height: 70px;\r\n  background-image: url(${ImageGlobal.Button.Down});\r\n  position: relative;\r\n  bottom: 20px;\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport DirectionToGo from \"../../helpers/DirectionToGo\";\r\nimport GameContext from \"../../helpers/context/GameContext/context\";\r\nimport * as S from \"./styles\";\r\n\r\nconst MobileControls = () => {\r\n  const { changeDirection } = useContext(GameContext);\r\n  return (\r\n    <S.MobileControlsContainer>\r\n      <S.BodyControls>\r\n        <S.BtnUp\r\n          onClick={() => changeDirection(DirectionToGo.TOP)}\r\n        ></S.BtnUp>\r\n        <div>\r\n          <S.BtnLEFT onClick={() => changeDirection(DirectionToGo.LEFT)}>\r\n           \r\n          </S.BtnLEFT>\r\n          <S.BtnRIGHT\r\n            onClick={() => changeDirection(DirectionToGo.RIGHT)}\r\n          ></S.BtnRIGHT>\r\n        </div>\r\n        <S.BtnDown\r\n          onClick={() => changeDirection(DirectionToGo.BOTTOM)}\r\n        ></S.BtnDown>\r\n      </S.BodyControls>\r\n    </S.MobileControlsContainer>\r\n  );\r\n};\r\n\r\nexport default MobileControls;\r\n","import styled from \"styled-components\";\r\nimport { keyframes } from \"styled-components\";\r\n\r\nconst RotateIconGit = keyframes`\r\n  0% { transform: rotate(40deg) }\r\n  10% {  transform: rotate(347deg) }\r\n  20% {   transform: rotate(17deg) }\r\n  30% {   transform: rotate(-60deg) }\r\n  40% {  transform: rotate(40deg)  }\r\n  60% {   transform: rotate(-70deg) }\r\n  80% {   transform: rotate(50deg) }\r\n  100% {  transform: rotate(-60deg) } \r\n`;\r\n\r\nexport const GoToGitHubStyle = styled.button`\r\n  background: #929eaa;\r\n  border-radius: 50%;\r\n  height: 65px;\r\n  width: 65px;\r\n  position: fixed;\r\n  bottom: 45px;\r\n  right: 11px;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background-color: #b1b6bb;\r\n  }\r\n  :active {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport const LinkToGitHub = styled.a`\r\n  text-decoration: none;\r\n  color: black;\r\n`;\r\n\r\nexport const ImgGit = styled.img`\r\n  height: 50px;\r\n  width: 50px;\r\n  transform: rotate(-20deg);\r\n  animation-name: ${RotateIconGit};\r\n  animation-duration: 2.8s;\r\n  animation-iteration-count: infinite;\r\n  margin-top: 5px;\r\n\r\n  :hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport const TextGitHub = styled.p`\r\n  width: 60px;\r\n  text-align: center;\r\n  position: relative;\r\n  right: 10px;\r\n  font-weight: bold;\r\n`;\r\n","import React from \"react\";\r\nimport ImageGlobal from \"../../helpers/ImageGlobal\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\ninterface GoToGitHubProps {\r\n  props?: string;\r\n}\r\n\r\nconst GoToGitHub: React.FC<GoToGitHubProps> = () => {\r\n  return (\r\n      <S.LinkToGitHub href=\"https://github.com/J0se-Luiz/Snake-Game-React\" target=\"_blank\">\r\n    <S.GoToGitHubStyle>\r\n        <S.ImgGit\r\n          src={ImageGlobal.GoToGitHub}\r\n          alt=\"Go to GitHub\"\r\n        />\r\n        <S.TextGitHub>Go to GitHub</S.TextGitHub>\r\n    </S.GoToGitHubStyle>\r\n      </S.LinkToGitHub>\r\n  );\r\n};\r\n\r\nexport default GoToGitHub;\r\n","import React, { KeyboardEvent, useContext } from \"react\";\r\nimport PlayArea from \"../../PlayArea\";\r\nimport Header from \"../../Header\";\r\nimport * as S from \"./styles\";\r\nimport GameContext from \"../../../helpers/context/GameContext/context\";\r\nimport DirectionToGo from \"../../../helpers/DirectionToGo\";\r\nimport GAME_SETTINGS from \"../../../helpers/config/gameSettings\";\r\nimport StartOrReplay from \"../../StartOrReplay\";\r\nimport MobileControls from \"../../MobileControls\";\r\nimport GoToGitHub from '../../GoToGitHub'\r\n\r\nconst Game = () => {\r\n  const { width } = GAME_SETTINGS.gameResolution;\r\n  const { changeDirection, state } = useContext(GameContext);\r\n\r\n  const handleGame = (e: KeyboardEvent) => {\r\n    switch (e.code) {\r\n      \r\n      case \"KeyS\":\r\n      case \"ArrowDown\": {\r\n        changeDirection(DirectionToGo.BOTTOM);\r\n        break;\r\n      }\r\n\r\n      case \"KeyW\":\r\n      case \"ArrowUp\": {\r\n        changeDirection(DirectionToGo.TOP);\r\n        break;\r\n      }\r\n\r\n      case \"KeyD\":\r\n      case \"ArrowRight\": {\r\n        changeDirection(DirectionToGo.RIGHT);\r\n        break;\r\n      }\r\n\r\n      case \"KeyA\":\r\n      case \"ArrowLeft\": {\r\n        changeDirection(DirectionToGo.LEFT);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <S.GameContainer\r\n        cursorVisible={state.isGameOver}\r\n        role=\"button\"\r\n        tabIndex={0}\r\n        onKeyUp={handleGame}\r\n        onKeyDown={() => {}}\r\n        style={{ width }}\r\n      >\r\n        <Header />\r\n        <PlayArea />\r\n        <StartOrReplay />\r\n      </S.GameContainer>\r\n      <MobileControls />\r\n      <GoToGitHub />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport GlobalContext from \"./helpers/context/index\";\r\nimport Game from './components/template/Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalContext>\r\n      <Game/>  \r\n    </GlobalContext>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}